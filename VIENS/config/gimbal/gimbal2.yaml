%YAML:1.0

#common parameters
imu_topic: "/wit/imu"
image_topic: "/usb_cam/image_raw"
encoder_topic: "/encoder_data"
output_path: "/home/huarsuma/result/vines_result/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 7.37e-02
   k2: -1.457e-01
   p1: 1.7e-03
   p2: 2e-03
projection_parameters:
   fx: 4.317e+02
   fy: 4.329e+02
   cx: 2.969e+02
   cy: 2.294e+02

# 是否使用编码器
encoder_enable: 0

# 是否使用新数据集
new_dataset: 1

axis: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00177999, -0.0098217, 0.99995]

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix. Rotation from camera frame to imu frame, imu^R_cam

#theta = 3.14159
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.08627154, 0.00166721, 0.99627027,
           -0.99624214, 0.00755315, -0.08628174, 
           -0.00766883, -0.99997008, 0.00100933]
#theta = 0
# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [0.06898152, -0.0069624, -0.99759364,
#            0.9974995, 0.0158895, 0.06886411, 
#            0.0153718, -0.99984951, 0.00804107]

extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0483362, 0.0303988, 0.0153621]
T_ec: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0270792, -0.00515718, 0.0148396]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 0                 # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.15  # max solver itration time (ms), to guarantee real time
max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0196          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.00152         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.000779        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.6645e-4       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80654        # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/huarsuma/result/vines_result/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: -0.0153960412                   # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
